{"version":3,"sources":["Home.js","CapitalistRevolution.js","serviceWorker.js","index.js","App.js"],"names":["Home","react_default","a","createElement","Fragment","href","react_router_dom","to","countriesRankings","1980","Lesotho","China","Burundi","Nepal","Tanzania","Myanmar","Lao","Indonesia","Guinea-Bissau","Mozambique","Ethiopia","Pakistan","Vietnam","India","Cambodia","Bangladesh","Togo","Burkina Faso","Rwanda","Zambia","Madagascar","Niger","Chad","Bosnia and Herzegovina","Dem. Rep. Congo","Mali","Senegal","Ghana","Benin","Central African Republic","Sierra Leone","Sri Lanka","Haiti","Egypt","Guatemala","West Bank and Gaza","Armenia","Sudan","Afghanistan","Philippines","Turkmenistan","Mauritius","Congo, Rep.","Mauritania","Kosovo","Cameroon","Jamaica","Nigeria","Malawi","Moldova","Mongolia","Uzbekistan","Angola","Liberia","Kyrgyz Republic","Morocco","Kenya","Algeria","Thailand","Botswana","Lithuania","Costa Rica","Panama","Namibia","Honduras","Albania","Kazakhstan","Bolivia","Belarus","Tunisia","El Salvador","Papua New Guinea","Georgia","Guinea","Syrian Arab Republic","Mexico","Guyana","South Africa","Jordan","Malaysia","Bulgaria","Colombia","Azerbaijan","Chile","Turkey","Russia","Romania","Iran","Tajikistan","Cote d'Ivoire","Brazil","Macedonia, FYR","Venezuela","Paraguay","Taiwan","Peru","Dominican Republic","Portugal","Estonia","Ecuador","Poland","Ukraine","Nicaragua","Slovak Republic","Czech Republic","Ireland","Uruguay","Trinidad and Tobago","Spain","Israel","Greece","Hungary","Croatia","Latvia","Argentina","Italy","Korea, Rep.","Slovenia","Japan","Belgium","Sweden","France","United Kingdom","Netherlands","Australia","Denmark","Norway","Austria","Germany","Canada","United States","Finland","Switzerland","2005","Swaziland","Djibouti","Gambia","Timor-Leste","Fiji","Serbia","Gabon","Cyprus","Singapore","sortedCountries","Object","keys","sort","CapitalistRevolution","_useState","useState","_useState2","slicedToArray","country","setCountry","_useState3","_useState4","year","setYear","onChange","e","currentTarget","value","map","style","width","src","concat","alt","type","checked","CapitalistRevolution_WorldMap","WorldMap","props","svgEl","useRef","useEffect","draw","_ref","asyncToGenerator","regenerator_default","mark","_callee","svg","world","rankingScale","rankingToColor","projection","path","b","s","t","tip","wrap","_context","prev","next","console","log","d3","current","fetch","content-type","then","x","json","sent","domain","length","ranking","scale","translate","bounds","Math","max","d3Tip","attr","html","d","name","properties","call","selectAll","data","features","enter","append","on","i","n","show","hide","stop","apply","this","arguments","height","ref","border","Boolean","window","location","hostname","match","ReactDOM","render","react_router","exact","component","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ea01a04.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function() {\n  return (\n    <>\n      <h1>What is this?</h1>\n      <p>\n        I'm reading <a href=\"https://core-econ.org/the-economy/?lang=en\">The Economy</a>,{' '}\n        <a href=\"https://www.goodreads.com/book/show/17744.The_Visual_Display_of_Quantitative_Information\">\n          The Visual Display of Quantitative Information\n        </a>{' '}\n        and learning to do data stuff with Python, and I'm gonna use this repository to store the\n        things I do as part of that learning. It's going to be a kind of collection of notes in code\n        and charts.\n      </p>\n\n      <h2>Index</h2>\n      <ol>\n        <li>\n          <Link to=\"/1-the-capitalist-revolution\">The Capitalist Revolution</Link>\n        </li>\n      </ol>\n    </>\n  )\n}\n","import React, { useEffect, useRef, useState } from 'react'\n// import { Link } from 'react-router-dom'\nimport * as d3 from 'd3'\nimport d3Tip from 'd3-tip'\n\nconst countriesRankings = {\n  '1980': {\n    Lesotho: 1,\n    China: 2,\n    Burundi: 3,\n    Nepal: 4,\n    Tanzania: 5,\n    Myanmar: 6,\n    Lao: 7,\n    Indonesia: 8,\n    'Guinea-Bissau': 9,\n    Mozambique: 10,\n    Ethiopia: 11,\n    Pakistan: 12,\n    Vietnam: 13,\n    India: 14,\n    Cambodia: 15,\n    Bangladesh: 16,\n    Togo: 17,\n    'Burkina Faso': 18,\n    Rwanda: 19,\n    Zambia: 20,\n    Madagascar: 21,\n    Niger: 22,\n    Chad: 23,\n    'Bosnia and Herzegovina': 24,\n    'Dem. Rep. Congo': 25,\n    Mali: 26,\n    Senegal: 27,\n    Ghana: 28,\n    Benin: 29,\n    'Central African Republic': 30,\n    'Sierra Leone': 31,\n    'Sri Lanka': 32,\n    Haiti: 33,\n    Egypt: 34,\n    Guatemala: 35,\n    'West Bank and Gaza': 36,\n    Armenia: 37,\n    Sudan: 38,\n    Afghanistan: 39,\n    Philippines: 40,\n    Turkmenistan: 41,\n    Mauritius: 42,\n    'Congo, Rep.': 43,\n    Mauritania: 44,\n    Kosovo: 45,\n    Cameroon: 46,\n    Jamaica: 47,\n    Nigeria: 48,\n    Malawi: 49,\n    Moldova: 50,\n    Mongolia: 51,\n    Uzbekistan: 52,\n    Angola: 53,\n    Liberia: 54,\n    'Kyrgyz Republic': 55,\n    Morocco: 56,\n    Kenya: 57,\n    Algeria: 58,\n    Thailand: 59,\n    Botswana: 60,\n    Lithuania: 61,\n    'Costa Rica': 62,\n    Panama: 63,\n    Namibia: 64,\n    Honduras: 65,\n    Albania: 66,\n    Kazakhstan: 67,\n    Bolivia: 68,\n    Belarus: 69,\n    Tunisia: 70,\n    'El Salvador': 71,\n    'Papua New Guinea': 72,\n    Georgia: 73,\n    Guinea: 74,\n    'Syrian Arab Republic': 75,\n    Mexico: 76,\n    Guyana: 77,\n    'South Africa': 78,\n    Jordan: 79,\n    Malaysia: 80,\n    Bulgaria: 81,\n    Colombia: 82,\n    Azerbaijan: 83,\n    Chile: 84,\n    Turkey: 85,\n    Russia: 86,\n    Romania: 87,\n    Iran: 88,\n    Tajikistan: 89,\n    \"Cote d'Ivoire\": 90,\n    Brazil: 91,\n    'Macedonia, FYR': 92,\n    Venezuela: 93,\n    Paraguay: 94,\n    Taiwan: 95,\n    Peru: 96,\n    'Dominican Republic': 97,\n    Portugal: 98,\n    Estonia: 99,\n    Ecuador: 100,\n    Poland: 101,\n    Ukraine: 102,\n    Nicaragua: 103,\n    'Slovak Republic': 104,\n    'Czech Republic': 105,\n    Ireland: 106,\n    Uruguay: 107,\n    'Trinidad and Tobago': 108,\n    Spain: 109,\n    Israel: 110,\n    Greece: 111,\n    Hungary: 112,\n    Croatia: 113,\n    Latvia: 114,\n    Argentina: 115,\n    Italy: 116,\n    'Korea, Rep.': 117,\n    Slovenia: 118,\n    Japan: 119,\n    Belgium: 120,\n    Sweden: 121,\n    France: 122,\n    'United Kingdom': 123,\n    Netherlands: 124,\n    Australia: 125,\n    Denmark: 126,\n    Norway: 127,\n    Austria: 128,\n    Germany: 129,\n    Canada: 130,\n    'United States': 131,\n    Finland: 132,\n    Switzerland: 133\n  },\n\n  '2005': {\n    Liberia: 1,\n    'Dem. Rep. Congo': 2,\n    Burundi: 3,\n    Madagascar: 4,\n    Lesotho: 5,\n    'Guinea-Bissau': 6,\n    'Sierra Leone': 7,\n    Afghanistan: 8,\n    Mozambique: 9,\n    Niger: 10,\n    'Central African Republic': 11,\n    Uzbekistan: 12,\n    Rwanda: 13,\n    Togo: 14,\n    Nigeria: 15,\n    Guinea: 16,\n    Turkmenistan: 17,\n    Tanzania: 18,\n    Zambia: 19,\n    Mali: 20,\n    Swaziland: 21,\n    Malawi: 22,\n    Benin: 23,\n    Bangladesh: 24,\n    Nepal: 25,\n    'Burkina Faso': 26,\n    Haiti: 27,\n    Ethiopia: 28,\n    Kenya: 29,\n    Senegal: 30,\n    Myanmar: 31,\n    Lao: 32,\n    Pakistan: 33,\n    Cambodia: 34,\n    Chad: 35,\n    India: 36,\n    'Kyrgyz Republic': 37,\n    Sudan: 38,\n    Moldova: 39,\n    Angola: 40,\n    \"Cote d'Ivoire\": 41,\n    Djibouti: 42,\n    Indonesia: 43,\n    Egypt: 44,\n    Cameroon: 45,\n    Tajikistan: 46,\n    'Papua New Guinea': 47,\n    Vietnam: 48,\n    Gambia: 49,\n    Mauritania: 50,\n    'Timor-Leste': 51,\n    Ghana: 52,\n    Philippines: 53,\n    Kosovo: 54,\n    Armenia: 55,\n    'Sri Lanka': 56,\n    'Congo, Rep.': 57,\n    Namibia: 58,\n    Fiji: 59,\n    Honduras: 60,\n    Guatemala: 61,\n    Mongolia: 62,\n    Nicaragua: 63,\n    Algeria: 64,\n    China: 65,\n    Jordan: 66,\n    Venezuela: 67,\n    Romania: 68,\n    Morocco: 69,\n    Albania: 70,\n    'West Bank and Gaza': 71,\n    Peru: 72,\n    Bolivia: 73,\n    'Syrian Arab Republic': 74,\n    'El Salvador': 75,\n    Azerbaijan: 76,\n    Bulgaria: 77,\n    Ecuador: 78,\n    'Dominican Republic': 79,\n    'South Africa': 80,\n    Colombia: 81,\n    Tunisia: 82,\n    Mauritius: 83,\n    Paraguay: 84,\n    Serbia: 85,\n    Panama: 86,\n    Botswana: 87,\n    Mexico: 88,\n    Brazil: 89,\n    Thailand: 90,\n    'Macedonia, FYR': 91,\n    Turkey: 92,\n    Jamaica: 93,\n    Kazakhstan: 94,\n    'Costa Rica': 95,\n    Belarus: 96,\n    Uruguay: 97,\n    Malaysia: 98,\n    Lithuania: 99,\n    Gabon: 100,\n    Iran: 101,\n    'Trinidad and Tobago': 102,\n    Latvia: 103,\n    Argentina: 104,\n    Ukraine: 105,\n    Poland: 106,\n    Cyprus: 107,\n    Hungary: 108,\n    Chile: 109,\n    Estonia: 110,\n    'Slovak Republic': 111,\n    Russia: 112,\n    'Czech Republic': 113,\n    Portugal: 114,\n    Israel: 115,\n    Slovenia: 116,\n    Greece: 117,\n    Croatia: 118,\n    Spain: 119,\n    Taiwan: 120,\n    Italy: 121,\n    France: 122,\n    Japan: 123,\n    Finland: 124,\n    Ireland: 125,\n    Denmark: 126,\n    Sweden: 127,\n    Belgium: 128,\n    Australia: 129,\n    Netherlands: 130,\n    Austria: 131,\n    Germany: 132,\n    'United Kingdom': 133,\n    Canada: 134,\n    Norway: 135,\n    Switzerland: 136,\n    'Korea, Rep.': 137,\n    'United States': 138,\n    Singapore: 139\n  }\n}\n\nconst sortedCountries = Object.keys(countriesRankings['1980']).sort()\n\nexport default function() {\n  const [country, setCountry] = useState(sortedCountries[0])\n  const [year, setYear] = useState('1980')\n\n  return (\n    <>\n      <h1>The Capitalist Revolution</h1>\n      <p>\n        This chapter starts talking about income and income inequality. It links to an{' '}\n        <a href=\"https://jackblun.github.io/Globalinc/\">amazing visualization</a>; the charts I'm\n        going to show here pale in comparison.\n      </p>\n      <p>\n        The data available as a CSV. I was curious about the evolution of the mean\n        income and 90/10 ratio in each country. So I created a bunch of PNGs using pandas and\n        matplotlib.\n      </p>\n\n      <select onChange={e => setCountry(e.currentTarget.value)}>\n        {sortedCountries.map(country => (\n          <option value={country}>{country}</option>\n        ))}\n      </select>\n\n      <div>\n        <img\n          style={{ width: '75%' }}\n          src={`1_the_capitalist_revolution/${country}_mean_income.png`}\n          alt=\"\"\n        />\n        <img\n          style={{ width: '75%' }}\n          src={`1_the_capitalist_revolution/${country}_90_10.png`}\n          alt=\"\"\n        />\n      </div>\n\n    <p>The visualization also shows how, if you sort countries by income, the position of each country changes between 1980 and 2005. The following map shows the position of each country in each year (green means higher in the top by income, red means lower)</p>\n\n      <form>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"1980\"\n            checked={year === '1980'}\n            onChange={() => setYear('1980')}\n          />\n          1980\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"2005\"\n            checked={year === '2005'}\n            onChange={() => setYear('2005')}\n          />\n          2005\n        </label>\n      </form>\n      <WorldMap year={year} />\n    </>\n  )\n}\n\nconst WorldMap = props => {\n  const width = 810\n  const height = 500\n  const svgEl = useRef(null)\n\n  useEffect(() => {\n    const draw = async () => {\n      console.log('drawing')\n      var svg = d3.select(svgEl.current)\n\n      var world = await fetch('world.json', { 'content-type': 'application/json' }).then(x =>\n        x.json()\n      )\n\n      const rankingScale = d3.scaleLinear().domain([1, sortedCountries.length], [0, 1])\n      const rankingToColor = ranking => d3.interpolateRdYlGn(rankingScale(ranking))\n\n      var projection = d3\n        .geoMercator()\n        .scale(1)\n        .translate([0, 0])\n      var path = d3.geoPath().projection(projection)\n\n      const b = path.bounds(world)\n      const s = 0.95 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height)\n      const t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2]\n\n      projection.scale(s).translate(t)\n\n      const tip = d3Tip()\n        .attr('class', 'd3-tip')\n        .html(d => {\n          const name = d.properties.name\n          const ranking = countriesRankings[props.year][name] ? (Object.keys(countriesRankings[props.year]).length - countriesRankings[props.year][name] + 1) : '?'\n          return `<div>Country: ${name}</div>\n  <div>Ranking: ${ranking}</div>\n`\n        })\n\n      svg.call(tip)\n\n      svg\n        .selectAll('path')\n        .data(world.features)\n        .enter()\n        .append('path')\n        .attr('d', path)\n      svg\n        .selectAll('path')\n        .attr('fill', function(d) {\n          const name = d.properties.name\n          if (countriesRankings[props.year][name]) {\n            return rankingToColor(countriesRankings[props.year][name])\n          } else {\n          }\n          return 'lightgray'\n        })\n        .attr('stroke', 'white')\n        .on('mouseover', function(d, i, n) {\n          tip.show(d, n[i])\n        })\n        .on('mouseout', function(d, i, n) {\n          tip.hide(d, n[i])\n        })\n    }\n\n    if (svgEl.current) {\n      draw()\n    }\n  }, [svgEl, props])\n\n  return (\n    <>\n      <svg width={width} height={height} ref={svgEl} style={{ border: 'solid' }}></svg>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('body'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport Home from './Home'\nimport CapitalistRevolution from './CapitalistRevolution'\n\nexport default function() {\n  return (\n    <Router>\n      <Route path='/' exact component={Home} />\n      <Route path='/1-the-capitalist-revolution' exact component={CapitalistRevolution} />\n    </Router>\n  )\n}\n"],"sourceRoot":""}